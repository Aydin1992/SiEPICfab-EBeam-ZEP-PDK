<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script

"""
This file is part of the SiEPICfab_EBeam_ZEP_PDK
by Jaspreet Jhoja, Lukas Chrostowski (c) 2020

This Python file implements a library called "SiEPICfab_EBeam_ZEP", consisting of mature components that have Layouts and Compact Models for circuit simulations:
 - Fixed GDS cell components: imported from fixed/*
 - PCells: imported from pcells/*

Crash warning:
 https://www.klayout.de/forum/discussion/734
 This library has nested PCells. Running this macro with a layout open may
 cause it to crash. Close the layout first before running.

Version history:

Lukas Chrostowski           2020/12/14
 - initial version based on SiEPIC-EBeam-PDK

"""

print('SiEPICfab_EBeam_ZEP_Library')

import pya
from pya import *
from SiEPIC.utils import get_technology_by_name
import os
import pathlib
import sys

dir_path = os.path.dirname(os.path.realpath(__file__))
if dir_path not in sys.path:
    sys.path.append(dir_path)

files = [f for f in os.listdir(os.path.join(os.path.dirname(
    os.path.realpath(__file__)),'SiEPICfab_EBeam_ZEP_pcells')) if '.py' in pathlib.Path(f).suffixes  and '__init__' not in f]
import SiEPICfab_EBeam_ZEP_pcells ### folder name ###
import importlib
importlib.invalidate_caches()
pcells_=[]
for f in files:
    module = 'SiEPICfab_EBeam_ZEP_pcells.%s' % f.replace('.py','')  ### folder name ###
    print(' - found module: %s' % module)
    m = importlib.import_module(module) 
    print(m)
    pcells_.append(importlib.reload(m))


class SiEPICfab_EBeam_ZEP_Library(Library):
  """
  The library where we will put the PCells and GDS into 
  """

  def __init__(self):
  
    tech_name = 'SiEPICfab_EBeam_ZEP'
    library = 'SiEPICfab_EBeam_ZEP'

    print("Initializing '%s' Library." % library)

    # Set the description
    self.description = "v0.0.1, Components"

  
    # Import all the GDS files from the tech folder "gds"
    import pathlib
    dir_path = pathlib.Path(__file__).parent/ "SiEPICfab_EBeam_ZEP_beta_fixed"
    for file1 in dir_path.rglob('*.gds'):
        file1 = file1.as_posix()
        print(" - reading %s" % file1 )
        self.layout().read(file1)    

    # Create the PCell declarations
    for m in pcells_:
        mm = m.__name__.replace('SiEPICfab_EBeam_ZEP_pcells.','')
        mm2 = m.__name__+'.'+mm+'()'
        print(' - register_pcell %s, %s' % (mm,mm2))
        self.layout().register_pcell(mm, eval(mm2))
    print(' done with SiEPICfab_EBeam_ZEP_pcells')

    if int(Application.instance().version().split('.')[1]) &gt; 24:
      # KLayout v0.25 introduced technology variable:
      self.technology=tech_name
      
    self.layout().add_meta_info(LayoutMetaInfo("path",str(pathlib.Path(__file__))))
    self.layout().add_meta_info(LayoutMetaInfo("technology",tech_name))
 
    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

# Instantiate and register the library
SiEPICfab_EBeam_ZEP_Library()

</text>
</klayout-macro>
